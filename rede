import numpy as np
import matplotlib.pyplot as plt
from random import *


def plotar(w1, w2, bias, title):
    xvals = np.arange(-1, 3, 0.01)
    newyvals = (((xvals * w2) * - 1) - bias) / w1
    plt.plot(xvals, newyvals, 'r-')
    plt.title(title)
    plt.xlabel('X1')
    plt.ylabel('X2')
    plt.axis([-1, 2, -1, 2])
    plt.plot([0, 1, 0], [0, 0, 1], 'b^')
    plt.plot([1], [1], 'go')
    plt.xticks([0, 1])
    plt.yticks([0, 1])
    plt.show()

def perceptron(max_it, E, a, X, d):

    #w=[.5,.6]
    w=[uniform(0,1),uniform(0,1)]
    #b=-.3
    b=uniform(0,1)
    print('pesos iniciados:',w[0], w[1], b)
    t=-1
    erros=[1]*len(X)
    while(t<max_it and E>0):
        for i in range(len(X)):
            u=f(w, X[i], b)
            if(u>0):
                y=1
            else:
                y=-1
            e=(d[i]-y)
            erros[i] = e
            print('X',i,'u', u,'y' ,y,'d', d[i], 'erro', e)
            print('pesos', w, b, )
            print(erros)
            atualizaPesos(w, X[i], e, a)
            b=(b+a*e)
        t=t+1
        E=contaErros(erros)
        print('qtdErros',E)
        print('ep', t,'\n\n')

    return w,b

def f(w, x,b):
    u=0
    for i in range(len(w)):
        v=(w[i]*x[i])
        u=u+v
    return (u+b)



def atualizaPesos(w, x, e, 
rendizagem):
    for i in range(len(w)):
        w[i]= w[i]+taxaAp*e*x[i];

def contaErros(a):
    q=0
    for i in range (len(a)):
        if(a[i]!=0):
            q=q+1
    return q

def main():
    X = [[0, 0], [0, 1], [1, 0], [1, 1]]
    d = [-1, -1, -1, 1]

    max_it = 10;   E = 1;  alpha = .1;

    w, bias = perceptron(max_it, E, alpha, X, d)
    plotar(w[0], w[1], bias, "Porta l√≥gica AND com Perceptron")


if __name__ == '__main__':
    main()
